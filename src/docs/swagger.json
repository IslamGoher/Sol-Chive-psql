{
  "openapi": "3.0.0",
  "info": {
    "title": "Sol-Chive API",
    "description": "An API documentation for Sol-Chive website",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "local server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "authentication methods"
    },
    {
      "name": "Solution",
      "description": "solution APIs"
    },
    {
      "name": "User",
      "description": "user APIs"
    }
  ],
  "paths": {
    "/api/v1/user": {
      "get": {
        "summary": "Get full user profile for authenticated or Anonymous user",
        "tags": ["User"],
        "description": "Get user data for user profile page.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "description": "email of user, enter it to get user data",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "user name"
                    },
                    "picture": {
                      "type": "string",
                      "description": "link to user picture"
                    },
                    "email": {
                      "type": "string",
                      "description": "user email"
                    },
                    "about": {
                      "type": "string",
                      "description": "about the user"
                    },
                    "contacts": {
                      "type": "string",
                      "description": "user contacts such as phone number and linkedin profile"
                    },
                    "problem_count": {
                      "type": "integer",
                      "description": "description user wrote about him self"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request, which mean that email is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found, which mean that there's no user found with given email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/anonymous/solutions/{email}": {
      "get": {
        "summary": "Get all user solutions for Anonymous user",
        "tags": ["Solution"],
        "description": "List all user solutions for unauthenticated user.",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "description": "email of user, enter it to get user solutions",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page of solution data",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "sortbydate",
            "in": "query",
            "required": false,
            "description": "either 'asc' or 'desc'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "description": "the source of solution, example: leetcode",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "tag that solution belong to, example: tree, graph",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perfectsolution",
            "in": "query",
            "required": false,
            "description": "chose solutions that must has perfect solution in it",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pageNumber": {
                      "type": "number",
                      "description": "current page number"
                    },
                    "totalPages": {
                      "type": "number",
                      "description": "the number of all pages"
                    },
                    "count": {
                      "type": "number",
                      "description": "number of solutions in current page"
                    },
                    "solutions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "solution_id": {
                            "type": "number",
                            "description": "the id of the solution"
                          },
                          "created_on": {
                            "type": "string",
                            "description": "the date that solution created on (YYYY-MM-DD HH:MM:SS)"
                          },
                          "title": {
                            "type": "string",
                            "description": "the title of the solution"
                          },
                          "link": {
                            "type": "string",
                            "description": "the url link of the solution"
                          },
                          "source": {
                            "type": "string",
                            "description": "the source of the solution"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request, which mean that email is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found, which mean that there's no solutions founded for given user email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/anonymous/solution/{solutionId}": {
      "get": {
        "summary": "Get one user solution for Anonymous user",
        "tags": ["Solution"],
        "description": "get one user solutions for unauthenticated user.",
        "parameters": [
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "description": "the id of solution, enter it to get solution data",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "solution_id": {
                      "type": "number",
                      "description": "the id of solution"
                    },
                    "created_on": {
                      "type": "string",
                      "description": "the date that solution created on (YYYY-MM-DD HH:MM:SS)"
                    },
                    "title": {
                      "type": "string",
                      "description": "the title of solution"
                    },
                    "link": {
                      "type": "string",
                      "description": "the url link of the solution"
                    },
                    "source": {
                      "type": "string",
                      "description": "the source of the solution"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "my_solution": {
                      "type": "string",
                      "description": "the problem solution"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request, which mean that id is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found, which mean that there's no solution found with given id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "summary": "Get google Oauth url",
        "tags": ["Authentication"],
        "description": "get url of google Oauth",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirectUrl": {
                      "type": "string",
                      "description": "google Oauth rul"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "delete": {
        "summary": "logging user out",
        "tags": ["Authentication"],
        "description": "delete user token",
        "responses": {
          "204": {
            "description": "no content"
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authorized to access this content"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/solutions": {
      "get": {
        "summary": "Get all user solutions for Authenticated user",
        "tags": ["Solution"],
        "description": "List all user solutions for authenticated user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "page of solution data",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "sortbydate",
            "in": "query",
            "required": false,
            "description": "either 'asc' or 'desc'",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "description": "the source of solution, example: leetcode",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "tag that solution belong to, example: tree, graph",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perfectsolution",
            "in": "query",
            "required": false,
            "description": "chose solutions that must has perfect solution in it",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pageNumber": {
                      "type": "number",
                      "description": "current page number"
                    },
                    "totalPages": {
                      "type": "number",
                      "description": "the number of all pages"
                    },
                    "count": {
                      "type": "number",
                      "description": "number of solutions in current page"
                    },
                    "solutions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "solution_id": {
                            "type": "number",
                            "description": "the id of the solution"
                          },
                          "created_on": {
                            "type": "string",
                            "description": "the date that solution created on (YYYY-MM-DD HH:MM:SS)"
                          },
                          "title": {
                            "type": "string",
                            "description": "the title of the solution"
                          },
                          "link": {
                            "type": "string",
                            "description": "the url link of the solution"
                          },
                          "source": {
                            "type": "string",
                            "description": "the source of the solution"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "perfect_solution": {
                            "type": "boolean",
                            "description": "if solution has perfect_solution or not"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request, which mean that email is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found, which mean that there's no solutions founded for given user email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add new solution",
        "tags": ["Solution"],
        "description": "Create new solution",
        "requestBody": {
          "description": "solution data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "required": true,
                    "description": "the title of solution",
                    "max-length": 255
                  },
                  "link": {
                    "type": "string",
                    "required": true,
                    "description": "the url link of the solution"
                  },
                  "mySolution": {
                    "type": "string",
                    "required": true,
                    "description": "the problem solution",
                    "max-length": 65535
                  },
                  "perfectSolution": {
                    "type": "string",
                    "required": false,
                    "description": "the perfect solution of problem",
                    "max-length": 65535
                  },
                  "tags": {
                    "type": "array",
                    "required": false,
                    "items": {
                      "type": "string",
                      "enum": [
                        "array",
                        "string",
                        "hash table",
                        "dynamic programming",
                        "math",
                        "depth-first search",
                        "sorting",
                        "greedy",
                        "database",
                        "breadth-first search",
                        "tree",
                        "binary search",
                        "matrix",
                        "binary tree",
                        "two pointers",
                        "bit manipulation",
                        "stack",
                        "design",
                        "heap",
                        "graph",
                        "backtracking",
                        "simulation",
                        "prefix sum",
                        "counting",
                        "sliding window",
                        "linked list",
                        "union find",
                        "recursion",
                        "ordered set",
                        "monotonic stack",
                        "binary search tree",
                        "trie",
                        "divide and conquer",
                        "bitmask",
                        "queue",
                        "enumeration",
                        "geometry",
                        "memoization",
                        "game theory",
                        "segment tree",
                        "topological sort",
                        "hash function",
                        "interactive",
                        "binary indexed tree",
                        "data stream",
                        "string matching",
                        "rolling hash",
                        "shortest path",
                        "randomized",
                        "number theory",
                        "combinatorics",
                        "monotonic queue",
                        "iterator",
                        "merge sort",
                        "concurrency",
                        "brainteaser",
                        "probability and statistics",
                        "doubly-linked list",
                        "quickselect",
                        "bucket sort",
                        "minimum spanning tree",
                        "counting sort",
                        "suffix array",
                        "shell",
                        "line sweep",
                        "reservoir sampling",
                        "eulerian circuit",
                        "strongly connected component",
                        "radix sort",
                        "rejection sampling"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "content created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message to inform user that solution created successfully"
                    },
                    "solutionId": {
                      "type": "number",
                      "description": "the id of new solution"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request, which mean that id is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/solutions/{solutionId}": {
      "get": {
        "summary": "Get one user solution for Authenticated user",
        "tags": ["Solution"],
        "description": "get one user solutions for authenticated user.",
        "parameters": [
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "description": "the id of solution, enter it to get solution data",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "solution_id": {
                      "type": "number",
                      "description": "the id of solution"
                    },
                    "created_on": {
                      "type": "string",
                      "description": "the date that solution created on (YYYY-MM-DD HH:MM:SS)"
                    },
                    "title": {
                      "type": "string",
                      "description": "the title of solution"
                    },
                    "link": {
                      "type": "string",
                      "description": "the url link of the solution"
                    },
                    "source": {
                      "type": "string",
                      "description": "the source of the solution"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "my_solution": {
                      "type": "string",
                      "description": "the problem solution"
                    },
                    "perfect_solution": {
                      "type": "string",
                      "description": "the perfect solution of problem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request, which mean that id is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found, which mean that there's no solution found with given id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete one user solution for Authenticated user",
        "tags": ["Solution"],
        "description": "delete one user solutions for authenticated user.",
        "parameters": [
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "description": "the id of solution, enter it to get solution data",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code of response"
                    },
                    "message": {
                      "type": "string",
                      "description": "message informs user that solution deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request, which mean that id is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "not found, which mean that there's no solution found with given id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update solution",
        "tags": ["Solution"],
        "description": "update solution data",
        "parameters": [
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "description": "the id of solution, enter it to update solution",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "solution data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "required": true,
                    "description": "the title of solution",
                    "max-length": 255
                  },
                  "link": {
                    "type": "string",
                    "required": true,
                    "description": "the url link of the solution"
                  },
                  "mySolution": {
                    "type": "string",
                    "required": true,
                    "description": "the problem solution",
                    "max-length": 65535
                  },
                  "perfectSolution": {
                    "type": "string",
                    "required": false,
                    "description": "the perfect solution of problem",
                    "max-length": 65535
                  },
                  "tags": {
                    "type": "array",
                    "required": false,
                    "items": {
                      "type": "string",
                      "enum": [
                        "array",
                        "string",
                        "hash table",
                        "dynamic programming",
                        "math",
                        "depth-first search",
                        "sorting",
                        "greedy",
                        "database",
                        "breadth-first search",
                        "tree",
                        "binary search",
                        "matrix",
                        "binary tree",
                        "two pointers",
                        "bit manipulation",
                        "stack",
                        "design",
                        "heap",
                        "graph",
                        "backtracking",
                        "simulation",
                        "prefix sum",
                        "counting",
                        "sliding window",
                        "linked list",
                        "union find",
                        "recursion",
                        "ordered set",
                        "monotonic stack",
                        "binary search tree",
                        "trie",
                        "divide and conquer",
                        "bitmask",
                        "queue",
                        "enumeration",
                        "geometry",
                        "memoization",
                        "game theory",
                        "segment tree",
                        "topological sort",
                        "hash function",
                        "interactive",
                        "binary indexed tree",
                        "data stream",
                        "string matching",
                        "rolling hash",
                        "shortest path",
                        "randomized",
                        "number theory",
                        "combinatorics",
                        "monotonic queue",
                        "iterator",
                        "merge sort",
                        "concurrency",
                        "brainteaser",
                        "probability and statistics",
                        "doubly-linked list",
                        "quickselect",
                        "bucket sort",
                        "minimum spanning tree",
                        "counting sort",
                        "suffix array",
                        "shell",
                        "line sweep",
                        "reservoir sampling",
                        "eulerian circuit",
                        "strongly connected component",
                        "radix sort",
                        "rejection sampling"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "solution updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message to inform user that solution updated successfully"
                    },
                    "solutionId": {
                      "type": "number",
                      "description": "the id of solution"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request, which mean that id is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "message that inform user what is the problem"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/basic-info": {
      "get": {
        "summary": "Get user basic info",
        "tags": ["User"],
        "description": "get name and picture of user",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "user name"
                    },
                    "picture": {
                      "type": "string",
                      "description": "link to user picture"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/update-avatar": {
      "patch": {
        "summary": "update user avatar",
        "tags": ["User"],
        "description": "get new avatar from login website and update it",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "picture": {
                      "type": "string",
                      "description": "link to user picture"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/settings": {
      "get": {
        "summary": "Get user settings data",
        "tags": ["User"],
        "description": "get name, about, and contacts of user",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "user name"
                    },
                    "about": {
                      "type": "string",
                      "description": "user bio"
                    },
                    "contacts": {
                      "type": "string",
                      "description": "user contacts"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "status code"
                    },
                    "message": {
                      "type": "string",
                      "description": "user isn't authenticated"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
